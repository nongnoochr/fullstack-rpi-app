from rpi import Controller

from flask import Flask, request,  render_template, jsonify
from flask_cors import CORS

# --- Initialize the app instance and specify  a static folder and template 
# folder to the client/front-end's build folder generated by react 
app = Flask(
        __name__, 
        static_folder="client/build/static", 
        template_folder="client/build")

# Since we developed the client independently in the dev mode which uses a 
# different localhost port (localhost:3000) than a port used by the server 
# (localhost:5000), we will enable CORS in our app to prevent a cross-origin 
# error

# See https://stackoverflow.com/questions/45373124/axios-post-request-to-flask
CORS(app, resources={r"/*": {"origins": "*"}})

# Wrap our source with try-finally to ensure the GPIO pins are restored after
# the app is stopped

try:
        
    # --- Initialize a RPi Controller object
    ctrl = Controller()

    # --- Render the app page in the build folder
    @app.route("/")
    def home():
        return render_template('index.html')

    # --- REST apis
    # Get data from sensors
    @app.route('/sensors/data', methods=['GET'])
    def get_sensors_data():

        data = ctrl.get_sensors_data()
        return jsonify(data)

    # Configure the external control port
    @app.route('/api/set_extctrl', methods=['GET', 'POST'])
    def set_extctrl():

        content = request.values.to_dict()
        if (content):
            try:
                status = content['status']
                ctrl.setExternalController(status)
                success = True
            except Exception as e:
                print('The following error occurs: ', e)
                success = False
        else:
            print('status data is not provided')
            success = False
        
        return jsonify({"success":success})

    # Perform the initialization step for the RPi program
    @app.route('/process/init', methods=['GET', 'POST'])
    def process_init():
        
        content = request.values.to_dict()

        print('content: ', content)
        if (content):    
            data = ctrl.process_init(config=content)

        else:

            print('status data is not provided')
            # data = {"success": False}
            data = {"success": True}
        
        return jsonify(data)

    # Start the RPi program
    @app.route('/process/start', methods=['GET', 'POST'])
    def process_start():
        
        data = ctrl.process_start()
        data = {"success": True}


        return jsonify(data)

    # Stop the RPi program
    @app.route('/process/stop', methods=['GET', 'POST'])
    def process_stop():

        data = ctrl.process_stop()
        data = {"success": True}

        return jsonify(data)

    # --- Start the Flask server!

    print('Starting Flask!')
    app.debug=True
    app.run(host='0.0.0.0', port=5000)

finally:
    print('* Cleanup GPIO before terminating')
    ctrl.cleanup()
    print('* Cleanup completed')
