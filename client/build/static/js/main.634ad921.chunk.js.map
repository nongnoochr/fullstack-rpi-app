{"version":3,"sources":["components/Layout/NavBar/NavBar.js","utils/TimeUtils.js","utils/SettingsUtils.js","components/Summary/Summary.js","components/UI/Loader/Loader.js","components/Timer/Timer.js","services/CONSTANT.js","components/Status/Status.js","containers/DisplayPanel/DisplayPanel.js","services/BaseService.js","services/LocalService.js","http/axios-server.js","services/ServerService.js","store/actions/service.js","store/actions/timer.js","store/actions/actionTypes.js","store/actions/settings.js","components/TimerSelector/TimerSelector.js","components/Settings/Settings.js","components/ControlButton/ControlButton.js","containers/ControlPanel/ControlPanel.js","components/Layout/MainContainer/MainContainer.js","components/Layout/Layout.js","App.js","store/actions/sensors.js","serviceWorker.js","store/utility.js","store/reducers/timer.js","store/reducers/settings.js","store/reducers/sensors.js","index.js","components/Status/Status.module.css","containers/DisplayPanel/DisplayPanel.module.css","containers/ControlPanel/ControlPanel.module.css","components/Settings/Settings.module.css","components/UI/Loader/Loader.module.css","components/Summary/Summary.module.css","components/ControlButton/ControlButton.module.css","components/Layout/MainContainer/MainContainer.module.css","components/TimerSelector/TimerSelector.module.css"],"names":["navBar","props","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","as","to","INIT_TIMER_DATA","hour","minute","second","delay","ms","Promise","res","setTimeout","getDurationData","updateDurationTime","convertDurationDataToSeconds","data","origDurationData","newRawSecs","newTimeSecs","newRawMins","Math","floor","newTimeMins","getDurationString","durationStr","toFixed","convertNumTimeToString","num","numStr","length","SETTINGS_LABEL","SETTINGS_VALUES","Summary","getTemperatureData","sensors","temperature","getDistanceData","distance","settingsStr","lastRunTimeStr","this","duration","settings","join","lastActualDuration","settingsData","externalCtrl","Object","keys","map","key","classes","Alert","AlertContents","Component","connect","state","loader","dot","timer","current","APPSTATE","Status","statusData","content","Standby","StatusText","Initializing","Loader","curProgress","curLabel","timerData","isrunning","msCurrent","ceil","Running","Timer","ProgressBarContainer","ProgressBar","animated","now","label","DisplayPanel","Container","DisplayElement","Card","Body","style","height","Header","status","BaseService","fetchSensorData","a","async","console","error","initProcess","success","startProcess","stopProcess","setExternalController","extCtrlState","LocalService","random","log","instance","axios","create","baseURL","ServerService","get","response","prop","bodyFormData","FormData","set","options","method","url","headers","post","Service","dispatch","dataStop","type","run","updateSettings","TimerSelector","updatePropValue","ev","stateName","updatedData","target","value","onUpdateSettings","name","min","max","step","defaultValue","disabled","onChange","actions","Settings","showTimer","Form","Group","Row","controlId","Label","column","sm","Col","Check","checked","newVal","onSetExternalController","ButtonToolbar","ToggleButtonGroup","ToggleButton","setState","display","TimeSelectorContainer","Button","onClick","onResetSettings","controlButton","btnConfig","defaultClassName","icon","ControlButton","clicked","ButtonIcon","ControlPanel","opacity","onClickStop","onClickStart","appstatus","dataInit","forEach","curSetting","resInit","dataStart","mainContainer","contents","item","index","Panel","layout","NavBar","MainContainer","App","localtimerstatus","_initData","onFetchSensorData","_addMilliSecond","updatedTime","onUpdateTimerCounter","_startTimer","onStopProcess","Layout","timerstatus","start","computedEnd","actualEnd","then","catch","err","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","TIMER_SETTINGS","isinitializing","initTimerData","updateStatus","action","newStatus","updateTimerCounter","newData","isInitSuccess","isSuccess","startDate","Date","endDate","getTime","setMilliseconds","diff","reducer","initSettings","updatedSettings","resetSettings","initData","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","timerReducer","settingsReducer","sensorsReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.634ad921.chunk.js","sourcesContent":["import React from 'react';\n\nimport { \n    Navbar, \n    Nav\n} from 'react-bootstrap';\n\n// See\n// https://stackoverflow.com/questions/54843302/reactjs-bootstrap-navbar-and-routing-not-working-together\nimport { Link } from 'react-router-dom';\n\n\nconst navBar = (props) => (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">RPi machine</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n            <Nav.Link href=\"#link\">Link</Nav.Link>\n            </Nav>\n        </Navbar.Collapse>\n        </Navbar>\n);\n\nexport default navBar;\n","// Constants\n\nexport const INIT_TIMER_DATA = {\n    hour:   0,\n    minute: 0,\n    second: 0\n}\n\n// ---------------\nexport const delay = ms => new Promise(res => setTimeout(res, ms));\n\n// ---------------\nexport const getDurationData = (ms) => {\n    return updateDurationTime(INIT_TIMER_DATA, ms);\n}\n\nexport const convertDurationDataToSeconds = (data) => {\n    const ms = 3600*data.hour\n        + 60*data.minute\n        + data.second;\n\n    return ms;\n}\n\nexport const updateDurationTime = (origDurationData, ms) => {\n    // Add a specified duration (in milliseconds) to a given duration data\n\n    // See\n    // https://jsfiddle.net/Daniel_Hug/pvk6p/\n\n    const origDurationSecs = convertDurationDataToSeconds(origDurationData);\n\n    const newRawSecs = origDurationSecs + ms/1000;\n    const newTimeSecs = newRawSecs % 60;\n\n    const newRawMins = Math.floor(newRawSecs / 60);\n    const newTimeMins = newRawMins % 60;\n\n    const newTimeHrs = Math.floor(newRawMins / 60);\n\n    return {\n        hour:   newTimeHrs,\n        minute: newTimeMins,\n        second: newTimeSecs\n    };\n}\n\nexport const getDurationString = (ms) => {\n\n    const data = getDurationData(ms);\n    let durationStr = '';\n    if (data.hour > 0) {\n        durationStr = durationStr + data.hour.toFixed() + ' hrs ';\n    }\n\n    if (data.minute > 0) {\n        durationStr = durationStr + data.minute.toFixed() + ' mins ';\n    }\n\n    if (data.second > 0) {\n        durationStr = durationStr + data.second.toFixed() + ' secs ';\n    }\n\n    return durationStr;\n}\n\n\nexport const getTimerString = (data) => {\n    // convert the input duration data to string\n        \n    const hr = convertNumTimeToString(data.hour);\n    const min = convertNumTimeToString(data.minute);\n    const sec = convertNumTimeToString(data.second);\n    \n    return hr + ':' + min + ':' + sec;\n};\n// --------------\n// Local Helpers\n// --------------\nconst convertNumTimeToString = (num) => {\n    let numStr = num.toFixed();\n    if (numStr.length === 1) {\n        numStr = '0' + numStr;\n    }\n    return numStr;\n};","export const SETTINGS_LABEL = {\n    externalCtrl:   'External Controller',\n    settings:       'Settings',\n    duration:       'Timer',\n};\n\nexport const SETTINGS_VALUES = {\n    setting1:   'LED1',\n    setting2:   'LED2'\n};\n","import React, {Fragment, Component} from 'react';\nimport classes from './Summary.module.css';\n\nimport { connect } from 'react-redux';\n\nimport Alert from 'react-bootstrap/Alert'\n\nimport { WiRaindrop, WiThermometer } from \"react-icons/wi\";\n\nimport { \n    getDurationString\n} from '../../utils/TimeUtils';\n\nimport { SETTINGS_LABEL } from '../../utils/SettingsUtils';\n\nclass Summary extends Component {\n\n    getTemperatureData = () => {\n            \n        if (this.props.data.sensors.temperature) {\n            return (\n                <span>\n                    <span>\n                        { this.props.data.sensors.temperature.toFixed(1) }\n                    </span>\n                    <span>&#8451;</span>\n                </span>\n                );\n        } else {\n            return 'N/A';\n        }\n            \n    }\n\n    getDistanceData = () => {\n            \n        if (this.props.data.sensors.distance) {\n            return (\n                <span>\n                    <span>\n                        { this.props.data.sensors.distance.toFixed(1) }\n                    </span>\n                    <span> cm</span>\n                </span>\n                );\n        } else {\n            return 'N/A';\n        }\n            \n    }\n\n    render () {\n        let durationStr;\n        if (this.props.data.duration) {\n            durationStr = getDurationString(this.props.data.duration);\n        } else {\n            durationStr = 'N/A';\n        }\n\n        let settingsStr;\n        if (this.props.settings.settings.length > 0) {\n            settingsStr = this.props.settings.settings.join('+');\n        } else {\n            settingsStr = 'None'\n        }\n        \n\n        let lastRunTimeStr;\n        if (this.props.data.lastActualDuration) {\n            lastRunTimeStr = getDurationString(this.props.data.lastActualDuration);\n        } else {\n            lastRunTimeStr = 'N/A';\n        }\n\n        const settingsData = {\n            [SETTINGS_LABEL.externalCtrl]:  this.props.settings.externalCtrl ? 'Enabled' : 'Disabled',\n            [SETTINGS_LABEL.settings]:      settingsStr,\n            [SETTINGS_LABEL.duration]:      durationStr,\n            'Last RunTime Duration':        lastRunTimeStr \n        };\n\n        const settings = Object.keys(settingsData).map((key) => (\n            <Fragment key={key}>\n                <div className=\"col-5\">\n                    <label>{key}</label>\n                </div>\n                <div className=\"col-7\">\n                    {settingsData[key]}\n                </div>\n            </Fragment>\n            \n        ));\n\n        return (\n            <div className={classes.Summary}>\n                <Alert \n                    variant=\"primary\"\n                    className={classes.AlertContents}\n                    >\n                    <div>\n                        <WiThermometer />\n                        <label>Temperature:</label> \n                        {this.getTemperatureData()}\n                        \n                    </div>\n                    <div>\n                        <WiRaindrop />\n                        <label>Distance:</label> \n                        {this.getDistanceData()}\n                    </div>\n                </Alert>\n\n                <div className=\"row\">\n                    {settings}\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        settings: state.settings\n    };\n};\n\nexport default connect(mapStateToProps)(Summary);\n","import React from 'react';\nimport classes from './Loader.module.css';\n\nconst loader = (props) => (\n    <div className={classes['loading-animation-container']}>\n        <div className={classes.dot}></div>\n        <div className={classes.dot}></div>\n        <div className={classes.dot}></div>\n    </div>\n);\n\nexport default loader;\n","import React from 'react';\nimport { getTimerString } from '../../utils/TimeUtils';\n\nconst timer = (props) => {\n\n    return (\n        <div>\n            {getTimerString(props.data.current)}\n        </div>\n    );\n}\n\nexport default timer;\n","export const ACTION = {\n    START:      'start',\n    INIT:       'init',\n    RUNNING:    'running',\n    STOP:       'stop'\n};\n\nexport const APPSTATE = {\n    STANDBY:        'standby',\n    INITIALIZING:   'initializing',\n    RUNNING:        'running'\n}","import React, {Component, Fragment} from 'react';\n\nimport classes from './Status.module.css';\nimport Loader from '../UI/Loader/Loader';\nimport Timer from '../Timer/Timer';\n\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { FiPower } from \"react-icons/fi\";\n\nimport { convertDurationDataToSeconds } from '../../utils/TimeUtils';\nimport { APPSTATE } from '../../services/CONSTANT'\n\nclass Status extends Component {\n\n\n    render () {\n\n        let statusData = {\n            className: '',\n            content: null,\n        };\n        \n        switch (this.props.state) {\n            case APPSTATE.STANDBY:\n                statusData = {\n                    className: classes.Standby,\n                    content: (<Fragment>\n                        <div className={classes.StatusText}>Standby</div>\n                        <div><FiPower /></div>\n                    </Fragment>) \n                }\n                break;\n\n            case APPSTATE.INITIALIZING:\n                statusData = {\n                    className: classes.Initializing,\n                    content: (<Fragment>\n                        <div className={classes.StatusText}>Initializing</div>\n                        <Loader />                    \n                    </Fragment>) \n                }\n                break;\n\n            case APPSTATE.RUNNING:\n                const timerData = {\n                    isrunning:  this.props.isrunning,\n                    current:    {\n                        ...this.props.data.current\n                    }\n                };\n\n                let curProgress, curLabel;\n                if (this.props.data.duration) {\n                    const msCurrent = convertDurationDataToSeconds(this.props.data.current) * 1000;\n                    curProgress = Math.ceil((msCurrent / this.props.data.duration) * 100);\n                    curLabel = `${curProgress}%`;\n\n                } else {\n                    curProgress = 100;\n                    curLabel = 'In progress...';\n                }\n                \n\n                statusData = {\n                    className: classes.Running,\n                    content: (<Fragment>\n                        <div className={classes.StatusText}>Running</div>\n                        <Timer data={timerData} />\n                        <div className={classes.ProgressBarContainer}>\n                            <ProgressBar animated \n                                now={curProgress} \n                                label={curLabel}\n                                />\n                        </div>\n                    </Fragment>) \n                }\n                break;\n\n            default:\n                    // do nothing\n        }\n            \n\n        return (\n            <div className={['box-border', classes.Status, statusData.className].join(' ')}>\n                {statusData.content}\n            </div>\n        );\n    }\n}\n\n\n\n\nexport default Status;","import React, { Component } from 'react';\nimport classes from './DisplayPanel.module.css';\n\nimport Summary from '../../components/Summary/Summary';\nimport Status from '../../components/Status/Status';\n\nimport { connect } from 'react-redux';\n\nimport Card from 'react-bootstrap/Card';\n\nclass DisplayPanel extends Component {\n\n    render () {\n\n        return (\n            <div className={classes.Container}>\n                <div className={[classes.DisplayElement, classes.Summary].join(' ')}>\n                    <Card>\n                        <Card.Body>\n                            <Summary data={ {\n                                sensors: {\n                                    ...this.props.sensors\n                                },\n                                duration: this.props.duration,\n                                lastActualDuration: this.props.lastActualDuration \n                                }} />\n                        </Card.Body>\n                    </Card>\n                </div>\n                \n                <div className={[classes.DisplayElement, classes.Status].join(' ')}>\n                    <Card className=\"text-center\"\n                        style={{height: '100%'}}>\n                        <Card.Header><strong>STATUS</strong></Card.Header>\n                        <Card.Body>\n                                <Status \n                                    state={this.props.status} \n                                    data={\n                                        { \n                                            current: this.props.current,\n                                            duration: this.props.duration\n                                        }\n                                    } \n                                />\n                        </Card.Body>\n\n                    </Card>\n\n                </div>\n                \n                \n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        current:    state.timer.current,\n        status:     state.timer.status,\n        sensors:    state.sensors,\n        duration:   state.settings.duration,\n        lastActualDuration: state.timer.lastActualDuration,\n\n    };\n};\n\nexport default connect(mapStateToProps)(DisplayPanel);\n","class BaseService {\n\n   static fetchSensorData = async () => {\n       \n        console.error('fetchSensorData - This method must be implemented');\n\n        return {\n           temperature:    null,\n           distance:       null\n        }\n   }\n\n   static initProcess = async(data) => {\n\n        console.error('initProcess - This method must be implemented');\n\n       \n       return {\n           success: false\n       }\n   }\n\n   static startProcess = async() => {\n       \n       console.error('startProcess - This method must be implemented');\n       \n       return {\n           success: false\n       }\n   }\n\n   static stopProcess = async() => {\n\n        console.error('This method must be implemented');\n\n\n       return {\n           success: false\n       }\n   }\n\n   static setExternalController = async(extCtrlState) => {\n\n    console.error('This method must be implemented');\n\n    return {\n        success: false\n    }\n   }\n\n}\n\nexport default BaseService;"," import BaseService from './BaseService';\n import { delay } from '../utils/TimeUtils';\n \n class LocalService extends BaseService {\n\n    static fetchSensorData = async () => {\n\n        const temperature   = 25 + (2*Math.random() - 1);\n        const distance      = 40 + (5*Math.random() - 3);\n\n        return {\n            temperature:    temperature,\n            distance:       distance\n        }\n    }\n\n    static initProcess = async() => {\n\n        console.log('Initializing process...');\n        await delay(1000);\n        \n        return {\n            success: true\n        }\n    }\n\n    static startProcess = async() => {\n        \n        console.log('START process...');\n        await delay(1000);\n        \n        return {\n            success: true\n        }\n    }\n\n    static stopProcess = async() => {\n        \n        console.log('STOP process...');\n        await delay(1000);\n        \n        return {\n            success: true\n        }\n    }\n\n    static setExternalController = async(extCtrlState) => {\n        console.log('SETExternalController process...');\n\n        return {\n            success: true\n        }\n\n    }\n\n }\n\n export default LocalService;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'http://localhost:5000/'\n});\n\nexport default instance;","import BaseService from './BaseService';\nimport axios from '../http/axios-server';\n\nclass ServerService extends BaseService {\n    static fetchSensorData = async () => {\n        const response = await axios.get('/sensors/data');\n        return response.data;\n    }\n\n    static initProcess = async(data) => {\n        console.log('Initializing process...');\n\n        // https://stackoverflow.com/questions/33625248/formdata-sends-boolean-as-string-to-server\n        var bodyFormData = new FormData();\n\n        // FormData always sends data as string.\n        // Hence, we need to cast boolean to a number to avoid\n        // issues in server\n\n        // since all of our data are boolean, we will convert\n        // all data to 0/1\n\n        for(const prop in data){\n            bodyFormData.set(prop, data[prop] ? 1 : 0);\n        }\n\n        const options = {\n            method: 'post',\n            url: '/process/init',\n            data: bodyFormData,\n            headers: {'Content-Type': 'multipart/form-data' }\n          };\n\n        const response = await axios(options);\n\n\n        // const response = await axios.post('/process/init');\n\n        return {\n            ...response.data\n        }\n    }\n\n    static startProcess = async() => {\n        \n        console.log('START process...');\n        \n        const response = await axios.post('/process/start');\n\n        return {\n            ...response.data\n        }\n    }\n\n    static stopProcess = async() => {\n        \n        console.log('STOP process...');\n        const response = await axios.post('/process/stop');\n\n        return {\n            ...response.data\n        }\n    }\n\n    static setExternalController = async(extCtrlState) => {\n        console.log('SETExternalController process...');\n\n        // https://stackoverflow.com/questions/33625248/formdata-sends-boolean-as-string-to-server\n        var bodyFormData = new FormData();\n\n        // FormData always sends data as string.\n        // Hence, we need to cast boolean to a number to avoid\n        // issues in server\n        bodyFormData.set('status', extCtrlState ? 1 : 0);\n\n        const options = {\n            method: 'post',\n            url: '/api/set_extctrl',\n            data: bodyFormData,\n            headers: {'Content-Type': 'multipart/form-data' }\n          };\n\n        const response = await axios(options);\n\n        return {\n            ...response.data\n        }\n    }\n}\n\nexport default ServerService;","import LocalService from '../../services/LocalService'\nimport ServerService from '../../services/ServerService'\n\nconst devMode = false;\n\n// Switch between Local & FullStack mode\nconst Service = devMode ? LocalService : ServerService;\n\nexport default Service;","import * as actionTypes from './actionTypes';\n\nimport Service from './service';\nimport { APPSTATE } from '../../services/CONSTANT';\nimport { SETTINGS_VALUES } from '../../utils/SettingsUtils';\n\n\nexport const updateStatus = (status) => {\n    return {\n        type:   actionTypes.UPDATE_STATUS,\n        status:    status\n    }\n}\n\nexport const updateTimerCounter = (counterData) => {\n    return {\n        type:   actionTypes.UPDATE_TIMERCOUNTER,\n        data:   counterData\n    }\n}\n\nexport const initProcess = () => {\n    return {\n        type: actionTypes.INIT_PROCESS,\n        success:    true\n    }\n}\n\nexport const startProcess = (settings) => {\n\n    return {\n        type: actionTypes.START_PROCESS,\n        duration:   settings.duration ? settings.duration : 0,\n        success:    true\n    }\n}\n\nexport const stopProcess = () => {\n    return dispatch => {\n\n        const run = async () => {\n            const dataStop = await Service.stopProcess();\n\n            dispatch({\n                type:   actionTypes.STOP_PROCESS,\n                success:    dataStop\n            });\n        };\n\n        run();\n\n    };\n    // return {\n    //     type: actionTypes.STOP_PROCESS,\n    //     success:    true\n    // }\n}\n\nexport const runEntireProcess = (settings) => {\n    return dispatch => {\n\n        const run = async () => {\n\n            // --- Start Init Process\n            dispatch(updateStatus(APPSTATE.INITIALIZING));\n\n            const dataInit = {\n                [SETTINGS_VALUES.setting1] :     0,\n                [SETTINGS_VALUES.setting2] :     0,\n            }\n\n            settings.settings.forEach(curSetting => dataInit[curSetting] = 1);\n\n            const resInit = await Service.initProcess(dataInit);\n\n            dispatch({\n                type:       actionTypes.INIT_PROCESS,\n                success:    resInit.success\n            });\n\n            // --- Start START Process\n            if (resInit.success) {\n\n                const dataStart = await Service.startProcess();\n\n                dispatch({\n                    type:       actionTypes.START_PROCESS,\n                    duration:   settings.duration ? settings.duration : 0,\n                    success:    dataStart.success\n                });\n            }\n            \n        };\n\n        run();\n\n    };\n    \n}","// For timer.js\nexport const UPDATE_STATUS  = 'UPDATE_STATUS';\nexport const UPDATE_TIMERCOUNTER  = 'UPDATE_TIMERCOUNTER';\n\nexport const INIT_PROCESS   = 'INIT_PROCESS';\nexport const START_PROCESS   = 'START_PROCESS';\nexport const RUN_ENTIREPROCESS   = 'RUN_ENTIREPROCESS';\nexport const STOP_PROCESS   = 'STOP_PROCESS';\n\n// For settings.js\nexport const UPDATE_SETTINGS = 'UPDATE_SETTINGS';\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const SET_EXTCTRL = 'SET_EXTCTRL';\n\n\n// For sensors.js\nexport const FETCH_SENSORDATA = 'FETCH_SENSORDATA';","import * as actionTypes from './actionTypes';\nimport Service from './service';\n\nexport const updateSettings = (settings) => {\n    return {\n        type: actionTypes.UPDATE_SETTINGS,\n        settings: settings\n    }\n}\n\nexport const resetSettings = () => {\n    return {\n        type: actionTypes.RESET_SETTINGS\n    }\n}\n\nexport const setExternalController = (extCtrlState) => {\n\n    return dispatch => {\n\n        const run = async () => {\n            const res = await Service.setExternalController(extCtrlState);\n\n            dispatch({\n                type:   actionTypes.SET_EXTCTRL,\n                settings:    {'externalCtrl': extCtrlState},\n                success:    res['success']\n            });\n        };\n\n        run();\n\n    };\n}","import React, { Component } from 'react';\nimport classes from './TimerSelector.module.css';\nimport { \n    convertDurationDataToSeconds,\n    getDurationData\n} from '../../utils/TimeUtils'\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nclass TimerSelector extends Component {\n\n\n    updatePropValue = (ev, stateName) => {\n\n\n        const updatedData = {\n            hour:   this.props.hour,\n            minute: this.props.minute,\n            second: this.props.second\n        };\n        updatedData[stateName] = +ev.target.value;\n\n        const durationSeconds = convertDurationDataToSeconds(updatedData);\n        const duration = durationSeconds * 1000;\n        this.props.onUpdateSettings({\n            duration: duration\n        })\n    }\n\n    render () {\n        return (\n            <div className={classes.TimerSelector}>\n                <div>\n                    <input \n                        type=\"number\" \n                        name=\"hour\" \n                        min=\"0\" \n                        max=\"999\"\n                        step=\"1\"\n                        defaultValue={this.props.hour}\n                        disabled={this.props.disabled}\n                        onChange={(ev) => this.updatePropValue(ev, 'hour')} /> Hours \n                </div>\n                <div>\n                    <input \n                        type=\"number\" \n                        name=\"minute\" \n                        min=\"0\" \n                        max=\"60\" \n                        step=\"1\"\n                        defaultValue={this.props.minute}\n                        disabled={this.props.disabled}\n                        onChange={(ev) => this.updatePropValue(ev, 'minute')} /> Minutes \n                </div>\n                <div>\n                    <input \n                        type=\"number\" \n                        name=\"second\" \n                        min=\"0\" \n                        max=\"60\"\n                        step=\"1\" \n                        defaultValue={this.props.second}\n                        disabled={this.props.disabled}\n                        onChange={(ev) => this.updatePropValue(ev, 'second')} /> Seconds \n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    const duration = state.settings.duration;\n    const timerData = getDurationData(duration);\n    return {\n        duration: duration,\n        ...timerData\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateSettings: (settings) => dispatch(actions.updateSettings(settings))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TimerSelector);\n","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nimport classes from './Settings.module.css';\nimport {\n    SETTINGS_LABEL, \n    SETTINGS_VALUES\n} from '../../utils/SettingsUtils';\n\nimport {\n    Col,\n    Form, \n    Row,\n    ButtonToolbar,\n    Button,\n    ToggleButtonGroup,\n    ToggleButton\n} from 'react-bootstrap';\n\nimport TimerSelector from '../TimerSelector/TimerSelector';\n\nimport { MdSettings } from \"react-icons/md\";\n\n\nclass Settings extends Component {\n\n    state = {\n        showTimer: false\n    }\n\n    render () {\n        return (\n            <div className={classes.Settings}>\n                <div>\n\n                <Form>\n\n                    <Form.Group as={Row} controlId=\"externalCtrlForm\">\n                        <Form.Label \n                            className={classes.Label}\n                            column sm={6}>\n                            Turn on {SETTINGS_LABEL.externalCtrl}\n                        </Form.Label>\n                        <Col sm={6}>\n                                \n                                <Form.Check \n                                        type=\"switch\"\n                                        id=\"switch-ext-ctrl\"\n                                        label=\"\" \n                                        checked={this.props.settings.externalCtrl}\n                                        disabled={this.props.isrunning}\n                                        onChange={ (ev) => {\n\n                                            const newVal = ev.target.checked;\n                                            this.props.onSetExternalController(newVal);\n                                        } }\n                                    />\n                        </Col>\n                    </Form.Group>\n\n                    </Form>\n\n                </div>\n                <div>\n                    <Form>\n                        <fieldset>\n                        <legend>\n                            <MdSettings />\n                            Configurations\n                        </legend>\n\n                            <Form.Group as={Row} controlId=\"settingsForm\">\n                                <Form.Label \n                                    className={classes.Label}\n                                    column sm={6}>\n                                    {SETTINGS_LABEL.settings}\n                                </Form.Label>\n                                <Col sm={6}>\n                                <ButtonToolbar>\n                                    <ToggleButtonGroup \n                                        type=\"checkbox\" \n                                        value={this.props.settings.settings}\n                                        onChange={(settings) => {\n                                            this.props.onUpdateSettings({\n                                                settings: settings\n                                            });\n                                        }}\n                                        >\n                                            <ToggleButton \n                                                value={SETTINGS_VALUES.setting1}\n                                                variant=\"outline-primary\" \n                                                disabled={this.props.isrunning}>\n                                                    {SETTINGS_VALUES.setting1}\n                                            </ToggleButton>\n                                            <ToggleButton \n                                                value={SETTINGS_VALUES.setting2}\n                                                variant=\"outline-primary\" \n                                                disabled={this.props.isrunning}>\n                                                    {SETTINGS_VALUES.setting2}\n                                            </ToggleButton>\n                                    </ToggleButtonGroup>\n                                </ButtonToolbar>\n                                </Col>\n                            </Form.Group>\n                            \n                            <Form.Group as={Row} controlId=\"durationForm\">\n                                <Form.Label \n                                    className={classes.Label}\n                                    column sm={6}>\n                                    {SETTINGS_LABEL.duration}\n                                </Form.Label>\n                                <Col sm={6}>\n                                        \n                                        <Form.Check \n                                                type=\"switch\"\n                                                id=\"switch-duration\"\n                                                label=\"\"\n                                                checked={this.state.showTimer}\n                                                disabled={this.props.isrunning}\n                                                onChange={(ev) => {\n                                                    this.setState({showTimer: ev.target.checked})\n                                                }}\n                                            />\n                                </Col>\n                                <div \n                                    style={{ display: this.state.showTimer ? null : \"none\" }}\n                                    className={classes.TimeSelectorContainer}\n                                    >\n                                    <TimerSelector disabled={this.props.isrunning} />\n                                </div>\n                            </Form.Group>\n\n                            <Button \n                                variant=\"outline-info\"\n                                onClick={() => {\n                                    this.props.onResetSettings();\n                                    this.setState({\n                                        showTimer: false\n                                    })\n                                }}\n                                >RESET</Button>\n\n                        </fieldset>\n                    </Form>\n                </div>\n            </div>\n            \n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        isrunning: state.timer.isrunning,\n        settings: state.settings\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateSettings: (settings) => dispatch(actions.updateSettings(settings)),\n        onResetSettings: () => dispatch(actions.resetSettings()),\n        onSetExternalController: (state) => dispatch(actions.setExternalController(state))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","import React from 'react';\nimport { MdPlayCircleOutline, MdStop } from \"react-icons/md\";\nimport classes from './ControlButton.module.css';\n\n\nconst controlButton = (props) => {\n\n    let defaultClassName = \"btn btn-lg btn-block \";\n    let btnConfig = null;\n\n    if (props.state === 'start') {\n        \n        btnConfig = {\n            className:  defaultClassName + 'btn-primary',\n            label:      'Press to START',\n            icon:       (<MdPlayCircleOutline />)\n        };\n\n    } else {\n\n        btnConfig = {\n            className:  defaultClassName + 'btn-danger',\n            label:      'Press to STOP',\n            icon:       (<MdStop />)\n        };\n        \n    }\n\n    return (\n        <div className={classes.ControlButton}>\n            <button \n                type=\"button\" \n                className={btnConfig.className}\n                style={{height: '100%'}}\n                onClick={props.clicked}\n                disabled={props.disabled}\n                >\n                    <div>\n                        <div className={classes.ButtonIcon}>\n                        {btnConfig.icon}\n                        </div>\n                        <div>{btnConfig.label}</div>\n                    </div>\n                    \n            </button>\n        </div>\n    );\n}\n\nexport default controlButton;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nimport classes from './ControlPanel.module.css';\n\nimport Settings from '../../components/Settings/Settings';\nimport ControlButton from '../../components/ControlButton/ControlButton';\nimport Card from 'react-bootstrap/Card';\nimport { APPSTATE } from '../../services/CONSTANT';\n\nclass ControlPanel extends Component {\n\n    render () {\n        return (\n            <Card>\n                <Card.Body>\n                    <div className={classes.Container}>\n                        <div \n                            style={{\n                                opacity: this.props.isrunning ? 0.4 : null\n                            }} \n                            className={[classes.Settings, classes.DisplayElement].join(' ')}>\n                                <Card>\n                                    <Card.Body>\n                                    <Settings />\n                                    </Card.Body>\n                                </Card>\n                            \n                        </div>\n                        <div className={[classes.ControlButton, classes.DisplayElement].join(' ')}>\n                            <ControlButton \n                                // clicked={this.props.onToggleStatus} \n                                state={!this.props.isrunning ? 'start' : 'stop'} \n                                clicked={!this.props.isrunning ? () => this.props.onClickStart(this.props.settings) : this.props.onClickStop}\n                                disabled={this.props.appstatus===APPSTATE.INITIALIZING}\n                                />\n                        </div>\n                </div>\n\n                </Card.Body>\n            </Card>\n            \n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        isrunning:  state.timer.isrunning,\n        appstatus:  state.timer.status,\n        settings:   state.settings\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onClickStart:   (settings) => dispatch(actions.runEntireProcess(settings)),\n        onClickStop:   () => dispatch(actions.stopProcess())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);\n","import React from 'react';\nimport DisplayPanel from '../../../containers/DisplayPanel/DisplayPanel';\nimport ControlPanel from '../../../containers/ControlPanel/ControlPanel';\n\nimport classes from './MainContainer.module.css';\n\nconst mainContainer = (props) => {\n    \n    const contents = [<DisplayPanel />, <ControlPanel />].map((item, index) => (\n        <div key={index} className={classes.Panel}>\n            {item}\n        </div>\n    ));\n\n    return (\n        <div className={[\"container-fluid\", classes.Container].join(' ')}>\n            {contents}\n        </div>\n    );\n};\n\nexport default mainContainer;","import React from 'react';\nimport NavBar from './NavBar/NavBar';\nimport MainContainer from './MainContainer/MainContainer';\n\nconst layout = (props) => (\n    <div>\n        <NavBar />\n        <MainContainer />\n    </div>\n);\n\nexport default layout;","import React, { Component } from 'react';\nimport Layout from './components/Layout/Layout';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport { connect } from 'react-redux';\nimport * as actions from './store/actions/index';\n\n\nimport {\n  delay,\n  convertDurationDataToSeconds,\n  updateDurationTime\n} from './utils/TimeUtils';\n\nclass App extends Component {\n\n\n  state = {\n\n    localtimerstatus: false\n\n  }\n\n  componentDidMount() {\n\t  this.props.onFetchSensorData();\n  }\n\n  componentDidUpdate() {\n\n    // If the START button is clicked but the timer has not been started\n    if (this.props.isrunning && !this.state.localtimerstatus) {\n\t\n\t\tthis.setState({localtimerstatus : true})\n\t\t// Start the timer\n\t\tthis._startTimer();\n\t}\n\t\n\tif (!this.props.isrunning && this.state.localtimerstatus) {\n\t\tthis.setState({localtimerstatus : false})\n\t}\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Layout />\n      </div>\n    );\n  }\n\n  // --- Private methods\n  _initData = () => {\n\n\n\tsetTimeout(() => {\n      this.props.onFetchSensorData();\n\n    }, 1000);\n  }\n\n  _addMilliSecond = (ms) => {\n\n    const updatedTime = updateDurationTime(this.props.current, ms);\n\n    // Update time\n    this.props.onUpdateTimerCounter(updatedTime);\n  }\n\n  _startTimer = () => {\n\n    // https://stackoverflow.com/questions/14226803/wait-5-seconds-before-executing-next-line/28173606\n\n    const addMilliSecond = async () => {\n\n      // Reset the counter first before start\n      this._initData();\n\n      while (this.props.isrunning) {\n\n        // Check whether the current time exceeds the duration\n        if (this.props.duration) {\n\n          const deltaTime = convertDurationDataToSeconds(this.props.current) * 1000;\n\n          if (deltaTime >= this.props.duration) {\n            this.props.onStopProcess();\n            break;\n          }\n        }\n\n        await delay(250);\n        this._addMilliSecond(250);\n      }\n    };\n\n    addMilliSecond();\n\n  }\n\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    isrunning: \tstate.timer.isrunning,\n\tduration: \tstate.settings.duration,\n\tcurrent: \tstate.timer.current,\n\n\ttimerstatus:    state.timer.timerstatus,\n    start:          state.timer.start,\n    computedEnd:    state.timer.computedEnd,\n    actualEnd:      state.timer.actualEnd,\n    lastActualDuration: state.timer.lastActualDuration,\n  };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n\tonFetchSensorData: () => dispatch(actions.fetchSensorData()),\n\tonUpdateTimerCounter: (data) => dispatch(actions.updateTimerCounter(data)),\n    onStopProcess: () => dispatch(actions.stopProcess())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as actionTypes from './actionTypes';\n\nimport { delay } from '../../utils/TimeUtils';\n\nimport Service from './service'\n\nexport const fetchSensorData = () => {\n\n    return dispatch => {\n\n        const repeatFetchData = async () => {\n\n            while (true) {\n\n                await Service.fetchSensorData()\n                    .then(data => {\n                        dispatch({\n                            type: actionTypes.FETCH_SENSORDATA,\n                            data: data\n                        });\n                    })\n                    .catch(err => console.log(err));\n\n                await delay(1000);\n\n\n            }\n            \n        };\n\n        repeatFetchData()\n\n        \n\n\n    };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n};","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nimport { APPSTATE } from '../../services/CONSTANT';\nimport { INIT_TIMER_DATA } from '../../utils/TimeUtils';\n\n\nconst TIMER_SETTINGS = {\n\n    status:     APPSTATE.STANDBY,\n\n    isinitializing:     false,\n    isrunning:          false,\n\n    current: {\n        ...INIT_TIMER_DATA\n    },\n    \n    // duration in milli-seconds\n    duration:   0,\n\n    timerstatus:    false,\n    start:          null,\n    computedEnd:    null,\n    actualEnd:      null,\n    lastActualDuration: null,\n};\n\nconst initTimerData = {\n    ...TIMER_SETTINGS\n};\n\n// --------\n\nconst updateStatus = (state, action) => {\n    const newStatus = action.status;\n    \n    switch (newStatus) {\n\n        case APPSTATE.INITIALIZING:\n            return updateObject(state, {\n                status:         newStatus,\n                isinitializing: true,\n                isrunning:      false\n            });\n\n        case APPSTATE.RUNNING:\n            return updateObject(state, {\n                status:         newStatus,\n                isinitializing: false,\n                isrunning:      true\n            });\n\n        default:\n            return state\n    }\n\n    \n};\n\nconst updateTimerCounter = (state, action) => {\n    const newData = {\n        ...action.data\n    }\n\n    return updateObject(state, { current: newData });\n}\n\nconst initProcess = (state, action) => {\n    const isInitSuccess = action.success;\n    let status = APPSTATE.STANDBY;\n\n    if (isInitSuccess) {\n        status = APPSTATE.INITIALIZING\n    }\n\n    return updateObject(state, {\n        status:         status,\n        isinitializing: isInitSuccess,\n        isrunning:      false\n    });\n};\n\nconst startProcess = (state, action) => {\n\n    // Get status data\n    const duration = action.duration;\n    const isSuccess = action.success;\n    let status = APPSTATE.STANDBY;\n\n    if (isSuccess) {\n        status = APPSTATE.RUNNING\n    }\n\n    // Get time data\n\n    let startDate = new Date();\n    let endDate = null;\n\n    if (duration) {\n      endDate = new Date(startDate.getTime());\n      endDate.setMilliseconds(duration);\n    }\n\n    // Update state\n\n    return updateObject(state, {\n        duration:       duration,\n        status:         status,\n        isinitializing: false,\n        isrunning:      isSuccess,\n        start:          startDate,\n        computedEnd:    endDate,\n        timerstatus:    true\n    });\n};\n\n\nconst stopProcess = (state, action) => {\n\n    const isSuccess = action.success;\n\n    if (isSuccess) {\n\n        const actualEnd = new Date();\n        const diff = (actualEnd - state.start);\n\n        return updateObject(state, {\n            status:         APPSTATE.STANDBY,\n            isinitializing: false,\n            isrunning:      false,\n            current:        {...INIT_TIMER_DATA},\n            actualEnd:      actualEnd,\n            lastActualDuration:     diff,\n            timerstatus:    false\n        });\n    } else {\n        return state;\n    }\n\n    \n};\n\n\n// --------------------\nconst reducer = ( state = initTimerData, action ) => {\n    switch ( action.type ) {\n\n        case actionTypes.UPDATE_STATUS: \n            return updateStatus( state, action );\n\n        case actionTypes.UPDATE_TIMERCOUNTER:\n            return updateTimerCounter( state, action );\n\n        case actionTypes.INIT_PROCESS: \n            return initProcess( state, action );\n\n        case actionTypes.START_PROCESS:\n            return startProcess( state, action );\n\n\n        case actionTypes.STOP_PROCESS:\n            return stopProcess( state, action );\n\n        default: return state;\n    }\n};\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nimport {\n    SETTINGS_VALUES\n} from '../../utils/SettingsUtils';\n\nconst initSettings = {\n    externalCtrl:   false,\n    settings:       [SETTINGS_VALUES.setting1, SETTINGS_VALUES.setting2],\n    duration:       0\n};\n\nconst updateSettings = (state, action) => {\n    const updatedSettings = {\n        ...action.settings\n    }\n    return updateObject(state, {\n        ...updatedSettings\n    });\n};\n\nconst setExternalController = (state, action) => {\n\n    if (action.success) {\n        return updateObject(state, {\n            ...action.settings\n        });\n    } else {\n        console.log('Cannot update the external controller in the server');\n        return state;\n\n    }\n};\n\n\nconst resetSettings = (state, action) => {\n    return updateObject(state, {\n        ...initSettings\n    });\n}\n\n// --------------------\nconst reducer = ( state = initSettings, action ) => {\n    switch ( action.type ) {\n        case actionTypes.UPDATE_SETTINGS: \n            return updateSettings( state, action );\n\n        case actionTypes.RESET_SETTINGS: \n            return resetSettings( state, action );\n\n        case actionTypes.SET_EXTCTRL: \n            return setExternalController( state, action );\n\n        default: return state;\n    }\n};\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initData = {\n    temperature:    null,\n    distance:       null\n};\n\nconst fetchSensorData = (state, action) => {\n\n    const updatedData = {\n        ...action.data\n    }\n\n    return updateObject(state, updatedData);\n};\n\n\n// --------------------\nconst reducer = ( state = initData, action ) => {\n    switch ( action.type ) {\n        case actionTypes.FETCH_SENSORDATA: \n            return fetchSensorData( state, action );\n\n            default: return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from'redux-thunk';\n\nimport timerReducer from './store/reducers/timer';\nimport settingsReducer from './store/reducers/settings';\nimport sensorsReducer from './store/reducers/sensors';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n    timer:      timerReducer,\n    settings:   settingsReducer,\n    sensors:    sensorsReducer\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n    \n);\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Status\":\"Status_Status__18r35\",\"StatusText\":\"Status_StatusText__2isoA\",\"Standby\":\"Status_Standby__3C7PQ\",\"Initializing\":\"Status_Initializing__2Qqtx\",\"Running\":\"Status_Running__1y_nl\",\"ProgressBarContainer\":\"Status_ProgressBarContainer__3Gux2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"DisplayPanel_Container__285zM\",\"DisplayElement\":\"DisplayPanel_DisplayElement__3afS8\",\"Summary\":\"DisplayPanel_Summary__2ewc5\",\"Status\":\"DisplayPanel_Status__2URGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ControlPanel_Container__qnkq1\",\"DisplayElement\":\"ControlPanel_DisplayElement__2h3sc\",\"Settings\":\"ControlPanel_Settings__1ZOo6\",\"ControlButton\":\"ControlPanel_ControlButton__2Oa9-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Settings_Label__3eKuP\",\"TimeSelectorContainer\":\"Settings_TimeSelectorContainer__27_OR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading-animation-container\":\"Loader_loading-animation-container__2M4Ci\",\"dot\":\"Loader_dot__2wAQQ\",\"bounce\":\"Loader_bounce__3a78I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AlertContents\":\"Summary_AlertContents__yj2hY\",\"Summary\":\"Summary_Summary__3T0TE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ControlButton\":\"ControlButton_ControlButton__376PQ\",\"ButtonIcon\":\"ControlButton_ButtonIcon__2CN2X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"MainContainer_Container__1w31R\",\"Panel\":\"MainContainer_Panel__nSoDg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimerSelector\":\"TimerSelector_TimerSelector__1SvwW\"};"],"sourceRoot":""}